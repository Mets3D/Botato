"""Useful secret links
	RLBot
		https://github.com/RLBot/RLBot/wiki/Useful-Game-Values
		https://github.com/RLBot/RLBot/wiki/Manipulating-Game-State
		Related: Boost hitboxes: https://discordapp.com/channels/348658686962696195/348661571297214465/570062735673393173
		https://github.com/samuelpmish/RLUtilities/tree/master/examples
	
	RLUtilities
		https://github.com/RLBot/RLBotPythonExample/wiki/Input-and-Output-Data
	
	
	Steering: https://www.youtube.com/watch?v=4Y7zG48uHRo
	Dribbling? https://discordapp.com/channels/348658686962696195/348661571297214465/570369598134681600
	Keyboard input https://discordapp.com/channels/348658686962696195/348658686962696196/570442556526034995
	
	Aerialing https://discordapp.com/channels/348658686962696195/535605770436345857/575733927789199380
	Yeeting at the ball https://discordapp.com/channels/348658686962696195/535605770436345857/576107478169812994

	Github tutorial: https://learngitbranching.js.org/
	Github book: https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History
	Where I left off in the book: https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History
	"""




"""TODO
	Next
		- Make speed maintaining more precise, if needed.
		- Assign a desired arrival speed, and be able to match it(Oof!!) - Remember that we can always gain 500 velocity by dodging into the ball!
			- This seems to only be doable by reworking most of Botato and be able to simulate him.


		- Prediction, and an initial strategy (hit_ball_towards_net, without ball chasing)
		-	Since we can't aerial yet, we'll have to time our approach so that we arrive at a reachable(!) point at the time when it lands there.
		-	!!! This is further trickified by the fact that a strategy's "target" is not its "destination". I don't know how to fix that atm, and I'm too tired to think about it, but should think it through before we continue.
		-	I'm starting to realize that instead of a sub-target system we need an entire path system, which is really the same thing, but my point is that the final target won't get treated differently from other targets in the path very much.
		-	The path will be recalculated each tick, starting at the strategy calculating the points that matter for it, then some corrective functions inserting additional waypoints in the path according to how much the strategy can accomodate that.
		-	Actually, that's wrong. Avoiding the goalpost is more important than reaching the strategy target! So I guess it will be: strategy creates path to target->avoid_goalpost() inserts one extra target if needed->calculate reachable... but.. we need to know whether something is reachable before we figure out the path to it...? Don't we?
		-	Maybe with some more processing, we can calculate a path to every single predicted ball, then do a reachable() check on the resulting path, to calculate if we can complete the entire path in the allotted time.
		-	Or getting out of the goalpost can just be its own Strategy.
		-	Nah, I prefer goalpost avoidance and boost grabbing to be "general" behaviour that is always active and doesn't block other things. We can simply insert a point to the path, and we don't care about whether this now makes the ball unreachable, fuck it.
		-	Or we could start looking into RLU to help us follow a path?
		
	
		How does a human do it? You know whether you can reach something based on intuitively knowing how much time and boost you need to get there. But calculating those without intuition is so fucking complicated.

		Consider building the path step by step, within the strategy. You first find your final destination, then your pre-final destination, then you can have more for more complex strategies, point is, you first start with the most important waypoints, starting from the destination. Avoiding the goalpost would also have to happen here.
		Calculate if that path is doable without picking up any more boost.
		Find the easiest boost to pick up on that path, ie. the boost which when inserted into the path, increases the time it takes to complete the path by the least amount.
		Repeat this step until the time to complete the path would go over our time threshold.


		- Sub-Target System (I think each strategy should be responsible for finding a path to their target while placing sub-targets for optimal boost pads and optimal angle, timing and speed of arrival at the target...)
		- Picking up boosts
		- Navigating on the wall(new ControllerState, switching to that when needed) (Also need a new testing Strategy, PickLocationOnWall)
		- Code refactoring (moving shit to new files)
	Features after that:
		- More ControllerStates! Aerialing, dribbling, etc. The hit_ball_towards_net strategy should pick the best state.
	Features after that:
		- More Strategies, that evaluate() themselves correctly, and pick ControllerStates correctly. Remember, according to our current design, a Strategy is responsible for finding a target position and desired speed.
	
	Plan out some details on how the bot will work in the long term. Maybe watch this series: https://youtu.be/NjJzPoo16iQ?t=507
		Look at some other bots again. Watch them fight each other, look at their code(even the C++ bots!) download some more bots that weren't included in the bot pack, etc.
		
		Will Strategies be able to affect controls directly, or will they just pick a target and a controller state?
		Do I want to have multiple controller states? What kinds?
		How will sub-targets work and how will I find them?
		What is a list of those features that I want implemented that other bots have already done?
		What is a list of features, if any, that I want implemented, that no one has done before, or not as well as I want to?
		Will I be able to accomodate these features with my planned system?
		How will prediction work?
		In what order am I going to implement features? When will I start using prediction?
	"""

"""Learning?
	Today I thought of a way to add some kind of "learning" to Botato.
	Once we have multiple strategies, we could introduce weights on them that affect how easily that strategy is selected to be the active strategy. All strategies would start with a weight of 1 when a game starts.
	Every time a strategy is switched, we would keep track of whether that strategy switched due to success or failure. Maybe we could even qualify the failure, eg. by picking that strategy, we got scored on.
	Over the course of the game, the weights would adjust to pick higher success rate strategies.
	This could be taken one step further by saving these results into a file, associated with the enemy's name, meaning Botato would remember what he learned about his opponent for future matches.
	And yet another step further, by looking for patterns in that saved file. Say, if a strategy is unsuccessful against a lot of enemies, we can either try to improve that strategy, remove it, or assign another, hard-coded weight to it that is less than 1 (Although in the system I have in mind, this could simply be done by adjusting the evaluate() function.).
	"""

"""Strategy ideas:
	(Pretty much all of these will rely on prediction)
	Kickoff: Botato does a nutty wavedash kickoff. ControllerStates: simple_wavedash, cs_on_ground, shoot_ball
	Defending: Botato is sitting in his goal, keeping himself aligned with where the ball is about to be. ControllerState: align_in_place
	Challenging: Botato is driving towards the ball, then dodges into it. ControllerState: drive_toward_target
	Saving: Botato is trying his bestest to hit the ball away from its current path. ControllerStates: drive_toward_target -> shoot_ball (TODO: in the future there could be many options for this one, eg. catching, aerialing, etc.)
	Rotating: Botato is going back towards his goal, picking up as much boost as possible. ControllerStates: drive_toward_target
	Shooting: Botato is going towards the ball, and then takes a shot. ControllerStates: drive_toward_target, shoot_ball
	Powershot: Reach a target location at a certain angle, a certain time, with a certain speed, and either dodge into it or don't depending on how much power we need and how much we don't mind dodging. I guess Powershot could be broken up into a few different strategies.
		This would be very useful, but does our system lend itself to it? Time and speed sound doable, but angle? The Strategy would have to find the target location that will later result in the car being at the desired angle. That's also doable.
		But both at the same time? I guess this means Strategy will not only be responsible for target location, but also desired speed to get there. The angle of approach would have to be achieved by moving the target correctly. So, in the end, this ControllerState would just be cs_on_ground with a target speed parameter.
	"""

"""Maneuver ideas
	In the future, controllerstates could be broken down into maneuvers. For example, cs_on_ground could be broken down into Simple_Steer, Powerslide_Until_Aligned, Dodge_Toward_Target. 
	This would allow controllerstates to share code nicely. We should also look into how RLU Maneuvers work. Is it the same idea? Or are those Maneuvers really just what we'd consider ControllerStates, or even entire Strategies?
	Note that boosting behaviour might end up being universal, I'm not sure yet.  
	"""

"""ControllerState ideas
	For now, we're working on the controllerstate cs_on_ground which will be responsible for getting us from point A to point B as fast as possible.
	The ideas listed below might be more fitting for Maneuvers, who knows.
	drive_toward_target should take an optional desired_speed parameter.

	jump_toward_target: Reach target by jumping and double-jumping or flipping. Can be used for both saving and shooting, hopefully.
	align_in_place: Align ourself with a target, probably starting with a powerslide), and try to keep ourself aligned by driving forwards and backwards. Used for defending/preparing for an enemy shot.
	
	
	Far future ideas...
	AerialAim: Before hitting a ball in the air(even if just double jumping) try to align our car so that the ball will bounce in a desired direction.
	
	Detect when the ball is about to be scored on our net in the very top of it, and if the conditions are right, drive up the back of the goal for the save!
	Instead of not dodging towards our target when the target is too close, correct our rotation during the dodge(towards the very end), towards our next target.
	reverse-half-flip when going back to our goal to defend
	"""

"""Implicit Strategy Selection framework"""
	# Note from the future: I'm not too confident anymore that this is a great idea, but I might still try for it. Truth is, it's a very long time until we'll have multiple strategies that will be close to each other in viability in any situation.

	# Each Strategy is a class that can evaluate() its own viability and execute() to find where it wants the car to go.
	# TODO Also choose *how* it wants the car to go there, how much boost it needs, etc? Not sure about this yet.
	# The Active Strategy will always be the one with the highest viability.
	# A strategy does not explicitly know when it should stop being the active strategy.
	# Instead, its viability will go down, and *hopefully* it will stop being the active strategy.
	# The benefits of this system are not 100% clear to me right now, but I like it, so I will pursue it for now.
	# If it doesn't work out, it should be easy to change it to a regular explicit if-this-then-that strategy selection system.

	# Notes:
	# The more specific our strategies are, the better. The goal is NOT to minimze the number of strategies, but to allow Botato to have a confident strategy in as many situations as possible.

"""Target and Sub-Target system"""
	# Each Strategy will find a target location where it currently wants the car to go. In the current system there is always only 1 target at a time, but that could change in the future if needed.
	# Sub-targets are like targets except they are aware of the next target, whether that target is the main target or another sub-target.
	# Sub-targets are used for:
		# Picking up boost
		# Avoiding goalpost
		# Bumping/demoing enemies
	# Main benefit: the approach to the sub-target can be affected by future targets before it. 
	# Ex: We're grabbing our corner boost. Next target is to go into the goal and defend. We can start turning and powersliding *before* we hit the corner boost sub-target, to get to the goal faster.
		# This might be the same as simply putting the target closer towards the car, rather than directly on the boost. But still, you have to put it closer towards the car depending on where the next target is, so that's the same thing actually.

"""Strategy ideas/memes 
	After a long time, most of these ideas still seem to fit the definition of what I now think of as a Strategy, so this is not a bad list, despite how early on into the process I wrote it.
	# Team Plays
		CenteringBall
		Passing
		
	# Defensive plays
		Saving
		Shadowing	# Go towards our own goal while grabbing boost and while keeping a distance from the enemy depending on their speed. Look for opportunities to turn around with a powerslide and challenge the ball. DO NOT DODGE. If the enemy flicks, aerial for the save.
		Clearing
		Catching
		Rotating	# Behaviour for disengaging after a failed attack. Prioritizing boost grabbing, look for opportunities for half flipping, wavedashing and shadowing.
		Backpassing	# Shooting the ball towards our own side of the field, but strictly towards the corner, and strictly with a weak force. Will usually result in grabbing a corner boost then either going up the wall or powerslide turning into a powershot.
		
	# Offensive plays
		Shooting	# Mostly used for empty nets.
		Dribbling
		Aerialing
		Demolishing
		
	#Celebrations
		Penising (this would (mostly) be a ControllerState)
		Turtling (this would (entirely) be a ControllerState)
		Tornadoing (mostly a ControllerState, or even a Maneuver.)
		
	# Plays while having ball control
		BallControl_FindBoost
		BallControl_HookShot
	"""


	

The Brain of Botato

The goal is to make Botato's design "easy to understand" for a human, ie. I want him to think like a human, or well, think like me, when I play the game.
Here's how I think I play the game:
In any situation, I decide where I want to be. Should I be going for the ball, preparing for a pass, grabbing boost, or going straight for a save?
Once I have the ball I don't really think about where I want to be, but where I want the ball to be.

Once I know where I want to be, I think of how to get there the fastest.
On my way there I might execute some set maneuvers like half flips and wavedashes, or a lot more options when it comes to shooting the ball, like aerials, air roll shots, ground shots, volleys, follow-up aerials, off the wall aerials, wall clears.
Once I'm where I want to be, I continue to correct my position to be most optimal as the situation changes.

I think what's interesting about this and how I've been designing Botato so far is that the world is different when I have the ball vs when I don't have the ball.


Botato is currently planned to have 4 layers of behaviour.
Level 0 is learning. Learning will assign weights to Strategies, but this is too far future and should be relatively easy to implement.
Layer 1 is Strategy. A Strategy is responsible for figuring out the following, in order to achieve its goal:
    - Evaluate its own viability
    - What point to move towards 
    - How fast to move towards it
    - What ControllerState to use
Layer 2 is ControllerState. A ControllerState is responsible for:
    - What Maneuvers to use.
Layer 3 is Maneuvers. A Maneuver is directly responsible for Botato's control inputs.

Example:
The WallShot strategy is the current highest valued strategy, so it becomes active.
    Since the car is not on the wall yet, it chooses the MoveOnGround ControllerState, and instead of setting the target directly on the wall/in the air, it sets the target at the bottom of the wall.
        The MoveOnGround ControllerState will call the Steer_On_Ground, Boost_On_Ground, Powerslide_Until_Aligned, Dodge_Toward_Target, HalfFlip, Wavedash, etc Maneuvers in order to get to the Strategy's target as fast as possible.
    Once the target is reached, if WallShot is still the highest valued strategy, it stays active, but its target changes to somewhere up on the wall. Due to this, it will pick the DriveOnWall ControllerState.
        The DriveOnWall ControllerState will call the Steer_On_Wall, Powerslide_On_Wall, Boost_On_Wall maneuvers.
    Once the target is reached yet again, it's time to take the shot. The WallShot Strategy will now choose the AerialShoot ControllerState.
        The AerialShoot ControllerState will call the Jump_Off_Wall, Roll_For_Shot, Dodge_For_Shot maneuvers.
So far none of the ControllerStates shared a maneuver, which may make them seem redundant. But consider this:

The Retreat Strategy becomes active.
    Because our car is on the wall, it chooses the GetOffWall ControllerState.
        The GetOffWall ControllerState will call Steer_On_Wall, Powerslide_On_Wall, Boost_On_Wall, Jump_Off_Wall maneuvers.
        But GetOffWall could really be the same as DriveOnWall though.
        Okay yeah fair enough, maneuvers seem pretty redundant.